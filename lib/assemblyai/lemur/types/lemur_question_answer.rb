# frozen_string_literal: true

require "json"

module AssemblyAI
  class Lemur
    # An answer generated by LeMUR and its question
    class LemurQuestionAnswer
      attr_reader :question, :answer, :additional_properties

      # @param question [String] The question for LeMUR to answer
      # @param answer [String] The answer generated by LeMUR
      # @param additional_properties [OpenStruct] Additional properties unmapped to the current class definition
      # @return [Lemur::LemurQuestionAnswer]
      def initialize(question:, answer:, additional_properties: nil)
        # @type [String] The question for LeMUR to answer
        @question = question
        # @type [String] The answer generated by LeMUR
        @answer = answer
        # @type [OpenStruct] Additional properties unmapped to the current class definition
        @additional_properties = additional_properties
      end

      # Deserialize a JSON object to an instance of LemurQuestionAnswer
      #
      # @param json_object [JSON]
      # @return [Lemur::LemurQuestionAnswer]
      def self.from_json(json_object:)
        struct = JSON.parse(json_object, object_class: OpenStruct)
        JSON.parse(json_object)
        question = struct.question
        answer = struct.answer
        new(question: question, answer: answer, additional_properties: struct)
      end

      # Serialize an instance of LemurQuestionAnswer to a JSON object
      #
      # @return [JSON]
      def to_json(*_args)
        { "question": @question, "answer": @answer }.to_json
      end

      # Leveraged for Union-type generation, validate_raw attempts to parse the given hash and check each fields type against the current object's property definitions.
      #
      # @param obj [Object]
      # @return [Void]
      def self.validate_raw(obj:)
        obj.question.is_a?(String) != false || raise("Passed value for field obj.question is not the expected type, validation failed.")
        obj.answer.is_a?(String) != false || raise("Passed value for field obj.answer is not the expected type, validation failed.")
      end
    end
  end
end
